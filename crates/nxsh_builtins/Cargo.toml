[package]
name = "nxsh_builtins"
version = "0.1.0"
edition = "2021"
license = "Apache-2.0 OR MIT"

[features]
# Full (desktop/server) build keeps legacy behavior. BusyBox/minimal build will disable default features via nxsh_cli.
default = ["full"]
linux = []  # Linux-specific features (procfs removed as it's C/C++ dependent)
metrics = ["dep:metrics", "dep:metrics-exporter-prometheus"]  # Enable metrics + prometheus exporter
# Advanced updater (HTTP + semantic versioning + signatures). All heavy HTTP/crypto deps made optional.
updates = ["dep:ureq", "dep:semver", "dep:ed25519-dalek"] # reqwest削除で rustls/ring 排除 (最小構成)
zstd = []  # (Placeholder flag retained for backward compat)
logging = ["dep:tracing-subscriber", "dep:tracing-appender", "nxsh_core/logging"] # Advanced logging incl. core logging module
minimal-logging = [] # Only basic info! macro; no subscriber setup
i18n = ["dep:fluent", "dep:fluent-bundle", "dep:unic-langid", "dep:chrono-tz"]
# Heavy i18n with full timezone database - significantly increases binary size (>500KB additional data)
heavy-i18n = ["dep:chrono-tz"]
# Lightweight i18n without timezone database - for size-sensitive builds
light-i18n = ["dep:fluent", "dep:fluent-bundle", "dep:unic-langid"]
net-http = ["dep:ureq"] # Internal lightweight HTTP fallback for curl/wget
# PowerShell typed objects (experimental) - kept out of minimal build
powershell-objects = []
system-info = ["dep:sysinfo"]            # System / process inspection utilities
progress-ui = ["dep:indicatif"]          # Progress bars / interactive indicators
compression-tar = ["dep:tar"]
compression-gzip = ["dep:miniz_oxide", "dep:flate2", "dep:deflate"]
compression-bzip2 = ["dep:bzip2-rs"]
compression-lzma = ["dep:lzma-rs"]
compression-zstd = ["dep:ruzstd"]
compression-zip = ["dep:zip"]
compression-all = [
	"compression-tar",
	"compression-gzip",
	"compression-bzip2",
	"compression-lzma",
	"compression-zstd",
	"compression-zip",
]
# Tiered compression bundles for finer gating
compression-core = ["compression-gzip"]                 # ubiquitous gzip/deflate only
compression-extended = ["compression-core", "compression-tar", "compression-zip"]
compression-heavy = ["compression-extended", "compression-bzip2", "compression-lzma", "compression-zstd"]
crypto = ["dep:chacha20poly1305"]

	json-select = ["dep:jmespath"]            # select (JMESPath JSON クエリ)
	dns-tools = ["dep:trust-dns-resolver"]    # dig / nslookup 系 DNS ルックアップ

# New fine‑grained gating categories for size trimming
heavy-time = []            # timedatectl, at, crontab, hwclock (time sync / scheduling heavy logic)
hardware = []              # lscpu, lsblk, lspci, lsusb, dmidecode, hdparm, smartctl, fdisk, mkfs, fsck, blkid
proc-trace = []            # strace, ltrace
math-advanced = []         # bc, dc, expr (arbitrary precision & parsing stacks)
package-management = []    # package manager abstraction
# New fine‑grained gating categories for size trimming (single authoritative definitions)
advanced-regex = ["dep:regex", "dep:fancy-regex", "dep:aho-corasick"]        # fancy-regex + aho-corasick + extended regex engine
parallel = ["dep:rayon"]              # rayon based parallel processing (sort, grep, compression)
error-rich = ["dep:color-eyre"]            # color-eyre richer reports
async-runtime = ["dep:tokio", "dep:futures", "dep:tokio-stream"]  # Async runtime support (omitted in super-min for size

# Convenience bundles
full = [
	"updates",
	"logging",
	"i18n",
	"heavy-i18n",
	"metrics",
	"compression-heavy",
	"crypto",
	"heavy-time",
	"hardware",
	"proc-trace",
	"math-advanced",
	"package-management",
	"json-select",
	"dns-tools",
	"advanced-regex",
	"parallel",
	"error-rich",
	"async-runtime",
]

# Minimal intentionally empty; used by nxsh_cli busybox-min to opt-out of heavy sets.
# Truly minimal: no heavy regex, parallel, or rich error layers, no timezone data
minimal = ["light-i18n"]
super-min = ["dep:futures"] # ultra-minimal: include lightweight futures executor for async builtins dispatch

# Minimal compression preset for busybox mode (only gzip) — opt-in via CLI if needed
minimal-compression = ["compression-core"]


[dependencies]
nxsh_core = { path = "../nxsh_core", default-features = false, features = ["error-rich", "heavy-time"] }
nxsh_hal = { path = "../nxsh_hal" }
anyhow = { version = "1", features = ["backtrace"] }
tracing = "0.1"
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
hostname = "0.3" 
dirs-next = "2" 
rand = { version = "0.8", default-features = false, features = ["std"] }
base64 = "0.21" 
tabled = "0.12"
pulldown-cmark = { version = "0.10", optional = true }
nu-ansi-term = "0.50"
fancy-regex = { version = "0.11", optional = true }  # advanced-regex feature
regex = { version = "1", optional = true }
# meval = "0.2"  # Replaced with exmex to eliminate C/C++ dependency (nom v1.2.4)
exmex = "0.20.4"  # Pure Rust expression evaluator
# bzip2 = "0.4"  # Requires C dependencies, removed for Pure Rust compliance
# Compression - Pure Rust implementations only (No C dependencies)
miniz_oxide = { version = "0.7", optional = true }  # Pure Rust gzip/deflate compression gated
flate2 = { version = "1.0", default-features = false, features = ["rust_backend"], optional = true }  # Pure Rust gzip gated
# bzip2 = { version = "0.4", default-features = false }  # Temporarily removed due to C dependencies 
bzip2-rs = { version = "0.1", optional = true }     # Pure Rust bzip2 compression and decompression gated
lzma-rs = { version = "0.3", optional = true }  # Pure Rust LZMA/XZ compression gated
ruzstd = { version = "0.5", optional = true }  # Pure Rust zstd decompression gated
tar = { version = "0.4", default-features = false, optional = true }  # Pure Rust tar archive gated
deflate = { version = "1.0", optional = true }  # Pure Rust deflate implementation gated
# XXH32 for optional zstd content checksum
xxhash-rust = { version = "0.8", features = ["xxh32", "xxh64"] }
# gix = "0.55"  # Pure Rust Git implementation - temporarily disabled due to dependency issues
indicatif = { version = "0.17", optional = true }
walkdir = "2" 
bitflags = "1" 
jmespath = { version = "0.3", optional = true }
# Network HTTP client - Pure Rust replacement for reqwest to avoid ring/rustls/C dependencies
# Replaces previous reqwest dependency which was removed in a prior commit
ureq = { version = "2.12", optional = true, default-features = false, features = ["json"] }
html2text = { version = "0.4", optional = true }
thiserror = "1"
once_cell = "1"
lazy_static = "1.4"  # For static user/group name caches
bytesize = "1.3"
chacha20poly1305 = { version = "0.10", optional = true }  # Pure Rust AEAD cipher (crypto feature)
# blake3 削除: build.rs 経由で cc 呼び出しを発生させる可能性を最小化 (現状 pure feature でも build.rs が cc を使う場合がある)
glob = "0.3"  # Pure Rust file globbing
ansi_term = { version = "0.12", optional = true }
terminal_size = "0.3"
libc = "0.2"  # For Unix system calls in id command
whoami = "1.5"  # Cross-platform user information
which = "4.4"
sysinfo = { version = "0.29", features = ["multithread"], optional = true }
crossterm = { version = "0.27", features = ["event-stream"] }
chrono = { version = "0.4", default-features = false, features = ["clock", "std", "serde"] }
# already present optional unic-langid below; only add num-format
num-format = "0.4"
trust-dns-resolver = { version = "0.23", features = ["tokio-runtime"], optional = true }
filetime = "0.2"  # Pure Rust file timestamp manipulation
# ratatui = "0.24"  # REMOVED: TUI dependency eliminated for CUI-only implementation
is-terminal = "0.4"  # Replace atty - Pure Rust terminal detection
url = "2"
percent-encoding = "2"
# File operations and compression - Pure Rust only
zip = { version = "0.6", default-features = false, features = ["deflate", "time"], optional = true }  # Pure Rust zip gated
tempfile = "3"
uuid = { version = "1.0", features = ["v4"] }
memmap2 = "0.9"

# Numerical computation - Pure Rust
num-bigint = "0.4"
num-rational = "0.4"
num-traits = "0.2"

# System info and utilities - Pure Rust
platform-info = "2.0"
humansize = "2.1"
memchr = "2.6"
unicode-width = "0.1"
unicode-segmentation = "1.10"
aho-corasick = { version = "1.1", optional = true }
hex = "0.4"
byteorder = "1.5"

# Command-line argument parsing
clap = { version = "4.0", features = ["derive"] }

# Time handling
time = { version = "0.3", features = ["macros", "formatting", "parsing"] }

# Text processing
globset = "0.4"

# Terminal features  
console = "0.15"

# Enhanced error handling
color-eyre = { version = "0.6", optional = true }
ed25519-dalek = { version = "2.2", optional = true, default-features = false, features = ["std"] }  # For cryptographic operations (updates/crypto gating)

# File handling
fs2 = "0.4"
mime_guess = "2.0"
encoding_rs = "0.8"
content_inspector = "0.2.4"

# Signal handling
ctrlc = "3.4"

# (criterion moved to existing [dev-dependencies] section at bottom)

# I18n support - Pure Rust
fluent = { version = "0.16", optional = true }
fluent-bundle = { version = "0.15", optional = true }
unic-langid = { version = "0.9", optional = true }

# Timezone support - Pure Rust
chrono-tz = { version = "0.8", optional = true }

# Cron expression parsing - Pure Rust
cron = "0.12"

# Async runtime - minimal features only
tokio = { version = "1.0", features = ["rt", "macros", "time", "process", "fs", "signal"], optional = true }
futures = { version = "0.3", optional = true }
criterion = "0.5"  # Moved from [dependencies]
encoding_rs_io = "0.1"

# Async futures support (only when async-runtime feature enabled)
tokio-stream = { version = "0.1", optional = true }

# Version comparison
semver = { version = "1.0", optional = true }

# CPU detection - Pure Rust
num_cpus = "1.16"

# Hash functions - Pure Rust implementations
sha2 = "0.10"
md5 = "0.7"
sha1 = "0.10"

# MBR manipulation - Pure Rust
mbrman = "0.5"

# Windows system API - Pure Rust bindings
windows-sys = { version = "0.59", features = [
	"Win32_Foundation",
	"Win32_Security",
	"Win32_Security_Authorization",
	"Win32_System_Memory",
	"Win32_System_Time",
	"Win32_NetworkManagement_IpHelper",
	"Win32_Networking_WinSock",
	"Win32_System_Threading",
	"Win32_System_ProcessStatus",
] }

# Logging infrastructure - Pure Rust
tracing-subscriber = { version = "0.3", features = ["env-filter", "time"], optional = true }
tracing-appender = { version = "0.2", optional = true }

# Metrics - Pure Rust
metrics-exporter-prometheus = { workspace = true, default-features = false, optional = true }
metrics = { workspace = true, optional = true }

# Parallel processing - Pure Rust
rayon = { version = "1.8", optional = true }

# Signal handling - Pure Rust 
signal-hook = "0.3"

# Synchronization - Pure Rust
parking_lot = "0.12"

# File system libraries - Pure Rust
fatfs = "0.3"
fscommon = "0.1"

# Compression libraries - Pure Rust alternatives only
# Using miniz_oxide and lzma-rs which are already included above

# Socket programming
socket2 = "0.5"

# HashMap replacement for dashmap
dashmap = "5.5"

# Fix bit-set dependency issue by specifying compatible version
bit-set = "0.6"
bit-vec = "0.6"

# Platform-specific dependencies - Pure Rust only
[target.'cfg(windows)'.dependencies]
whoami = "1.6"
windows = { version = "0.58", features = [
    "Win32_Foundation",
    "Win32_Security",
    "Win32_System_SystemServices",
] }

[target.'cfg(unix)'.dependencies]
# Unix-specific dependencies
uzers = "0.11"
nix = { version = "0.27", features = ["signal", "sched", "fs", "process"] }
# libc = "0.2"  # Removed C/C++ dependency - replaced with nix

[dev-dependencies]
tempfile = "3" 
serial_test = "2"
criterion = "0.5"
proptest = "1.0"
assert_cmd = "2.0"
predicates = "3.0" 

[build-dependencies]
regex = "1"
anyhow = "1"