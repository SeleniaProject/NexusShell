// Auto-generates builtin introspection tables by scanning execute_builtin match arms.
// This keeps the builtin name list DRY without rewriting the dispatch logic.
use std::{env, fs, path::PathBuf};
use anyhow::{Context, Result};
use regex::Regex;

fn main() -> Result<()> {
    // Location of lib.rs containing execute_builtin.
    let crate_dir = PathBuf::from(env::var("CARGO_MANIFEST_DIR").unwrap());
    let src_lib = crate_dir.join("src").join("lib.rs");
    let content = fs::read_to_string(&src_lib)
        .with_context(|| format!("reading {:?}", src_lib))?;

    // Regex to capture match arms like: "alias" => or "cp" => { ... }
    let re = Regex::new(r#"([a-zA-Z0-9_-]+)"\s*=>"#).unwrap();

    // Narrow scope to the execute_builtin function to avoid false positives.
    let exec_start = content.find("pub fn execute_builtin").unwrap_or(0);
    let exec_body = &content[exec_start..];

    // Stop at the closing match block '}' that ends function - heuristic: first line that starts with "}\n" after a depth decrease.
    // Simpler: just search whole exec_body; risk minimal.

    let mut names: Vec<String> = re.captures_iter(exec_body)
        .map(|c| c[1].to_string())
        .collect();

    // Dedup while preserving order (first occurrence wins)
    let mut seen = std::collections::HashSet::new();
    names.retain(|n| seen.insert(n.clone()));

    names.sort(); // Provide stable order independent of source for reproducibility.

    let out_dir = PathBuf::from(env::var("OUT_DIR").unwrap());
    let out_file = out_dir.join("builtins_generated.rs");

    let slice_entries: String = names.iter().map(|n| format!("\"{}\"", n)).collect::<Vec<_>>().join(",");

    // Generate code: a sorted slice + binary search based lookup + original order list.
    // Note: original order lost by sorting; acceptable for introspection. If needed, keep both.
    let code = format!(r#"// @generated by build.rs. Do not edit manually.
#[allow(clippy::unwrap_used)]
pub const BUILTIN_NAMES: &[&str] = &[{slice_entries}];

pub fn is_builtin_name_generated(name: &str) -> bool {{
    BUILTIN_NAMES.binary_search(&name).is_ok()
}}

pub fn list_builtin_names_generated() -> Vec<&'static str> {{
    BUILTIN_NAMES.to_vec()
}}
"#);

    fs::write(&out_file, code).with_context(|| format!("writing {:?}", out_file))?;

    // Tell cargo to rerun if source changes.
    println!("cargo:rerun-if-changed={}", src_lib.display());

    Ok(())
}
