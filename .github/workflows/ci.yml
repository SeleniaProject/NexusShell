name: NexusShell CI

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  build-and-test:
    name: Build and test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Show rustc/cargo version
        run: |
          rustc -V
          cargo -V

      - name: Cargo check (all features)
        run: cargo check --workspace --all-features

      - name: Cargo test (all features)
        run: cargo test --workspace --all-features --no-fail-fast

      - name: Cargo build release (all features)
        run: cargo build --workspace --all-features --release

  clippy:
    name: Clippy (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run clippy (diagnostics only)
        run: cargo clippy --workspace --all-features -- -A clippy::all

  fmt:
    name: Format check (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust toolchain (with rustfmt)
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: Check formatting
        run: cargo fmt --all -- --check

  deny:
    name: Cargo Deny (dependency audit)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cargo Deny
        uses: EmbarkStudios/cargo-deny-action@v1

  i18n:
    name: I18N compile check (ubuntu)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Make scripts executable
        run: chmod +x scripts/compile_po_to_mo.sh
      - name: Compile translations
        run: scripts/compile_po_to_mo.sh

  size-gate:
    name: Size gate (busybox-min)
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Run size report (threshold)
        shell: pwsh
        run: |
          $env:NXSH_SIZE_MAX = "1572864"
          ./scripts/size_report.ps1 -Profile release-small -Variant busybox-min -OutJson size_report_local.json
          if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }
      - name: Upload size report
        uses: actions/upload-artifact@v4
        with:
          name: size-report
          path: size_report_local.json
  theme-validate:
    name: Theme validation (python)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Validate theme JSONs
        run: python scripts/tools/validate_themes.py

  coverage:
    name: Coverage (ubuntu)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust toolchain (llvm-tools)
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-llvm-cov
      - name: Generate coverage (lcov)
        run: |
          cargo llvm-cov clean --workspace
          cargo llvm-cov --workspace --all-features --no-report
          cargo llvm-cov --workspace --all-features --lcov --output-path coverage.lcov
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-lcov
          path: coverage.lcov
      - name: Upload to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: coverage.lcov
          fail_ci_if_error: false